# -*- coding: utf-8 -*-
"""python_tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OkGMbFwXkd-pLfsW7qtga_Fz3s30pGov

#EE559 Python Instruction Session II: Basics of Python

Part of this tutorial was originally created by [Justin Johnson](https://web.eecs.umich.edu/~justincj/) for cs231n. This version has been adapted and improved by Shuai Xu for USC EE559 Spring 2022. It runs Python3 by default. (modified from Min Zhang EE559 S21)

In this tutorial:
 - Part 1, we will cover basics of python: **variables and data types, containers, control flow, input/output, function, reading from and writing to files**.

- Part 2, we will cover three important python libraries: **Numpy, Matplotlib, and Pandas**.

## A Brief Note on Python Versions

As of Janurary 1, 2020, Python has [officially dropped support](https://www.python.org/doc/sunset-python-2/) for `python2`. We'll be using Python 3.7 for this iteration of the course. You can check your Python version in the shell by running `import sys`, then `print(sys.version)`, or at the command line by running `python --version`.
"""

import sys
print(sys.version)

"""##Basics of Python

Python is a high-level, dynamically typed multiparadigm programming language. Python code is often said to be almost like *pseudocode*, since it allows you to express very powerful ideas in very few lines of code while being very readable.

##Variables & Data Types

Variable is basically just a container where we can store certain data values, it makes a lot easier for us to work with and manage all of the different data inside of our programs. We will look at the different types of variables and the different types of data that we can store inside of variables.
"""

print("There is a course called EE559 in USC, ")
print("one of the TAs is Thanos.")

"""In order to make that change, you will need to look through the entire program find it where that value was and change it."""

print("There is a course called EE660 in USC, ")
print("one of the TAs is Fernando.")

course_name = "EE660"  # only string needs quotation mark
ta_name = "Fernando"
print("There is a course called " + course_name + " in USC, ")
print("one of the TAs is " + ta_name + ".")

"""###Strings"""

# String literals can use single quotes or double quotes in Python; it does not matter
print('hello\nworld')  # insert a new line into the string

print('Shuai\'s Apple')  # put a quotation mark into the string using a escape character

hello = 'hello'
world = "world"
hw = hello + ' ' + world  # String concatenation
print(hw)

hw12 = '{} {} {}'.format(hello, world, 2022)  # string formatting
print(hw12)
hw12 = f'{hello} {world} {2022}'
print(hw12)

"""String objects have a bunch of useful methods/functions. You can find a list of all string methods in the [documentation](https://docs.python.org/3.7/library/stdtypes.html#string-methods). For example:"""

s = "hello"
print(s.capitalize())           # Capitalize a string
print(s.upper())                # Convert a string to uppercase; prints "HELLO"
print(s.isupper())              # Check if a string is entirely uppercase
print(s.upper().isupper())  
print(s.rjust(7))               # Right-justify a string, padding with spaces
print(s.center(7))              # Center a string, padding with spaces
print(s.replace('l', '(ll)'))  # Replace all instances of one substring with another
print('  world '.strip())       # Strip leading and trailing whitespace

s = "hello"
print(len(s))          # length of the string, really useful
print(s[0])            # indexing starts at 0
print(s[:2])           # slicing
print(s.index("ll"))
# print(s.index("z"))  # raise error if the character doesn't exist

s[0] = 'T'             # immutable

"""###Numbers
Integers and floats work as you would expect from other languages:
"""

x = 3.1
print(x, type(x))

print(x + 1)   # Addition
print(x - 1)   # Subtraction
print(x * 2)   # Multiplication
print(x ** 2)  # Exponentiation
print(x % 2)   # Remainder

x += 1   # x = x + 1, can not use x++
print(x)
x *= 2  # x = x * 2
print(x)

y = 2.5
print(type(y))
print(y, y + 1, y * 2, y ** 2)

"""Note that unlike many languages, Python does not have unary increment (x++) or decrement (x--) operators.

Python also has built-in types for long integers and complex numbers; you can find all of the details in the [documentation](https://docs.python.org/3.7/library/stdtypes.html#numeric-types-int-float-long-complex).
"""

z = 3
print(str(z) + " my favorite number")  # print number next to a string
print(z + " my favorite number")     # raise error

z = -5
print(abs(z))
print(pow(z, 3))  # **
print(max(4, 6))
print(round(3.8))
print(floor(3.7))

"""To access some other functions, we should import external code into our files."""

import math  # from math import *
z = 3.7
print(math.floor(z))     # grab the lowest integer
print(math.ceil(z))
print(math.sqrt(4))

"""###Booleans
Python implements all of the usual operators for Boolean logic
"""

t, f = True, False
print(type(t))

print(t and f) # Logical operator AND;
print(t or f)  # Logical operator OR;
print(not t)   # Logical operator NOT;
print(t & f)   # symbol &
print(t | f)   # symbol |
print(t != f)  # Logical XOR; XOR: if not equal, we get True

c = input("What's your name: ")
print(type(c))
print("My name is " + c)

"""##Containers
Python includes several built-in container types: lists, dictionaries, sets, and tuples.

###Lists
A list is the Python equivalent of an array, but is resizeable and can contain elements of different types:
"""

xs = [3, 1, 2]    # Create a list
print(xs)
print(xs[2])
print(xs[-1])     # Negative indices count from the end of the list; prints "2"

xs[2] = 'EE559'    # Lists can contain elements of different types
print(xs)

xs.append('bar') # Add a new element to the end of the list
print(xs)

x = xs.pop()     # Remove and return the last element of the list
print(x, xs)

"""As usual, you can find all the gory details about lists in the [documentation](https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists).

####Slicing
In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:
"""

nums = list(range(5))    # range is a built-in function that creates a list of integers
print(nums)              # Prints "[0, 1, 2, 3, 4]"
print(nums[2:4])         # Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"
print(nums[2:])          # Get a slice from index 2 to the end; prints "[2, 3, 4]"
print(nums[:2])          # Get a slice from the start to index 2 (exclusive); prints "[0, 1]"
print(nums[:])           # Get a slice of the whole list; prints ["0, 1, 2, 3, 4]"
print(nums[:-1])         # Slice indices can be negative; prints ["0, 1, 2, 3]"
print(nums[1:4:2])       # step = 2, [1, 9]
print(nums[::-1])        # step = -1, reverse
nums[2:4] = [8, 9, 10, 10]       # Assign a new sublist to a slice
print(nums)              # Prints "[0, 1, 8, 9, 4]"

"""####For Loop
You can loop over the elements of a list like this:
"""

animals = ['cat', 'dog', 'monkey']
for animal in animals:
    print(animal)

"""####List comprehensions:
When programming, frequently we want to transform one type of data into another. As a simple example, consider the following code that computes square numbers:
"""

nums = [0, 1, 2, 3, 4]
squares = []
for x in nums:
    squares.append(x ** 2)
print(squares)

"""You can make this code simpler using a list comprehension:"""

nums = [0, 1, 2, 3, 4]
squares = [x ** 2 for x in nums]
print(squares)

"""List comprehensions can also contain conditions:"""

nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print(even_squares)

"""###Dictionaries
A dictionary stores (key, value) pairs, similar to a `Map` in Java or an object in Javascript. You can use it like this:
"""

d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data
print(d['cat'])       # Get an entry from a dictionary; prints "cute"
print('cat' in d)     # Check if a dictionary has a given key; prints "True"

d['fish'] = 'wet'    # Set an entry in a dictionary
print(d['fish'])      # Prints "wet"
print(d['monkey'])  # KeyError: 'monkey' not a key of d

print(d.get('monkey', 'N/A'))  # Get an element with a default; prints "N/A"
print(d.get('fish', 'N/A'))    # Get an element with a default; prints "wet"

del d['fish']        # Remove an element from a dictionary
print(d.get('fish', 'N/A')) # "fish" is no longer a key; prints "N/A"

"""You can find all you need to know about dictionaries in the [documentation](https://docs.python.org/2/library/stdtypes.html#dict).

It is easy to iterate over the keys in a dictionary:
"""

d = {'monkey': 2, 'cat': 4, 'spider': 8}
print(d.items())

for animal, legs in d.items():
    print('A {} has {} legs'.format(animal, legs))

"""Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries. For example:"""

nums = [0, 1, 2, 3, 4]
even_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}
print(even_num_to_square)

"""###Sets
A set is an **unordered** collection of **distinct** elements. As a simple example, consider the following:
"""

new = {3, 1.2, True, (1, 2)}  # set can't contain list
print(new)
animals = {'cat', 'dog'} # set keeps distinct elements
print('cat' in animals)   # Check if an element is in a set; prints "True"
print('fish' in animals)  # prints "False"

animals.add('fish')      # Add an element to a set, unordered
print(animals)
print('fish' in animals)
print(len(animals))       # Number of elements in a set;

animals.add('cat')       # Adding an element that is already in the set does nothing
print(animals)    
animals.remove('cat')    # Remove an element from a set
print(animals)

"""Set comprehensions: Like lists and dictionaries, we can easily construct sets using set comprehensions:"""

from math import sqrt
print({int(sqrt(x)) for x in range(5)})

"""###Tuples
A tuple is an **immutable** ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. Here is a trivial example:
"""

t = (5, 6)       # Create a tuple
print(type(t))
d = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys, but list can't be the key of dict
print(d[t])       
print(d[(1, 2)])

print(t[0])
t[0] = '1'   # immutable

coordinates = [(1, 2), (3, 4)]   # list of tuples
print(coordinates[0])
coordinates[0] = 1
print(coordinates)

"""##Control Flow

###If Statement
Execute certain code when certain conditions are true.
"""

a = 0
if a > 0:
  print("a is positive")
elif a == 0:
  print("a is zero")
else:
  print("a is negative")

"""###For Loop
You can loop over the elements of a list like this:
"""

animals = ['cat', 'dog', 'monkey']
for animal in animals:
    print(animal)

"""If you want access to the index of each element within the body of a loop, use the built-in `enumerate` function:"""

animals = ['cat', 'dog', 'monkey']
for idx, animal in enumerate(animals):
    print('#{}: {}'.format(idx + 1, animal))

"""###While Loop
Loop through the code executing it repeatedly until a certain condition was false. 
"""

i = 1
while i <= 10:
  print(i)
  i += 1

"""###Try Except
Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called *exceptions* and are not necessarily fatal: exceptions can be caught and dealt with within the program so that our program won't break.
"""

number = int(input("Enter a number: "))
print(number)
print("continue")

try:
  number = int(input("Enter a number: "))
  print(number)
except:
  print("Invalid Input")
print("continue")

value = 10 / 0

try:
  value = 10 / 0  
except ZeroDivisionError:  # catch different types of errors
  print("Divided by zero")
except ValueError:
  print("Invalid input")

try:
  value = 10 / 0  
except ZeroDivisionError as err:  # store as variable
  print(err)
except ValueError:
  print("Invalid input")

"""##Functions
Function is basically just a collection of code which performs a specific task, helping organize your code.

Python functions are defined using the `def` keyword. 
"""

def signNewElement(x):
    if x > 0:
        return 'positive'
    elif x < 0:
        return 'negative'
    else:
        return 'zero'

for x in [-1, 0, 1]:
    print(signNewElement(x))

"""We will often define functions to take optional keyword arguments, like this:"""

def hello(name, loud=False):
    if loud:
        print('HELLO, {}'.format(name.upper()))
    else:
        print('Hello, {}!'.format(name))

hello('Bob')
hello('Fred', loud=True)

"""##Reading and Writing Files
1. Write some text to a file with name test.txt
2. Read the text again
3. Print it to the screen

"""

f = open("test.txt", "w")  # w: write
f.write("This is the first line.\n"
        "This is the second line.\n"
        "This is the last line.")
f.close()

f = open("test.txt", "a")   # a: append
f.write("\nThis is the new line.")
f.close()

f = open("test.txt", "w")
f.write("\nThis is the new line.")  # if "r", can't write
print(f.readable())
f.close()

f = open("test.txt", "r")   # r: read, r+: read and write
print(f.readable())
print(f.read())
f.close()

f = open("test.txt", "r")
print(f.readline())   # read first line
# print(f.readline())  # read second line
f.close()

f = open("test.txt", "r")
print(f.readlines())
f.close()

# no need to close the file by yourself
with open("test.txt", "r") as f:
  for line in f.readlines():
    print(line)

"""##Example
As an example, here is an implementation of the classic quicksort algorithm in Python
"""

def quicksort(arr):                                    # function with required arguments
    if len(arr) <= 1:                                  # if statement
        return arr
    pivot = arr[len(arr) // 2]                         # list indexing
    left = [x for x in arr if x < pivot]               # list comprehension with conditions
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)  # + is append between lists

print(quicksort([3,6,8,10,1,2,1]))                      # input is a list of numbers

"""## ———— Next Time ————
Numpy, Matplotlib, Pandas

##Numpy

Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. If you are already familiar with MATLAB, you might find this [tutorial](http://wiki.scipy.org/NumPy_for_Matlab_Users) useful to get started with Numpy.

To use Numpy, we first need to import the `numpy` package:
"""

import numpy as np

"""###Arrays

A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.

We can initialize numpy arrays from nested Python lists, and access elements using square brackets:
"""

a = np.array([1, 2, 3])  # Create a rank 1 array
print(type(a), a.shape, a[0], a[1], a[2])
a[0] = 5                 # Change an element of the array
print(a)

b = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array
print(b)

print(b.shape)
print(b[0, 0], b[0, 1], b[1, 0])

"""We can convert array to list or tuple:"""

print(list(a))
print(tuple(a))

"""Numpy also provides many functions to create arrays:"""

a = np.zeros((2,2))  # Create an array of all zeros
print(a)

b = np.ones((1,2))   # Create an array of all ones
print(b)

c = np.full((2,2), 7) # Create a constant array
print(c)

d = np.eye(2)        # Create a 2x2 identity matrix
print(d)

e = np.random.random((2,2)) # Create an array filled with random values
print(e)

"""###Array indexing

Numpy offers several ways to index into arrays.

**Slicing**: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:
"""

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
print(a)

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]
print(b)

"""***A slice of an array is a view into the same data, so modifying it will modify the original array.***"""

print(a[0, 1])
b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print(a[0, 1])

"""**Integer array indexing**: When you index into numpy arrays using slicing, the resulting array view will always be a subarray of the original array. In contrast, integer array indexing allows you to construct arbitrary arrays using the data from another array. Here is an example:"""

a = np.array([[1,2], [3, 4], [5, 6]])
print(a)
# An example of integer array indexing.
# The returned array will have shape (3,) and 
print(a[[0, 1, 2], [0, 1, 0]])

# The above example of integer array indexing is equivalent to this:
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))

# When using integer array indexing, you can reuse the same
# element from the source array:
print(a[[0, 0], [1, 1]])

# Equivalent to the previous integer array indexing example
print(np.array([a[0, 1], a[0, 1]]))

"""One useful trick with integer array indexing is selecting or mutating one element from each row of a matrix:"""

# Create a new array from which we will select elements
a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
print(a)

# Create an array of indices
b = np.array([0, 2, 0, 1])

# Select one element from each row of a using the indices in b
print(a[np.arange(4), b])  # Prints "[ 1  6  7 11]"

# Mutate one element from each row of using the indices in b
a[np.arange(4), b] += 10
print(a)

"""You can also **mix integer indexing with slice indexing**. However, doing so will yield an array of lower rank than the original array. Note that this is quite different from the way that MATLAB handles array slicing:"""

# Create the following rank 2 array with shape (3, 4)
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
print(a)

"""Two ways of accessing the data in the middle row of the array.
Mixing integer indexing with slices yields an array of lower rank,
while using only slices yields an array of the same rank as the
original array:
"""

row_r1 = a[1, :]    # Rank 1 view of the second row of a  (integer indexing)
row_r2 = a[1:2, :]  # Rank 2 view of the second row of a
row_r3 = a[[1], :]  # Rank 2 view of the second row of a
print(row_r1, row_r1.shape)
print(row_r2, row_r2.shape)
print(row_r3, row_r3.shape)

# We can make the same distinction when accessing columns of an array:
col_r1 = a[:, 1]
col_r2 = a[:, 1:2]
print(col_r1, col_r1.shape)
print()
print(col_r2, col_r2.shape)

"""**Boolean array indexing**: Boolean array indexing lets you pick out arbitrary elements of an array. Frequently this type of indexing is used to select the elements of an array that satisfy some condition. Here is an example:"""

import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])

bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                    # this returns a numpy array of Booleans of the same
                    # shape as a, where each slot of bool_idx tells
                    # whether that element of a is > 2.

print(bool_idx)

# We use boolean array indexing to construct a rank 1 array
# consisting of the elements of a corresponding to the True values
# of bool_idx
print(a[bool_idx])

# We can do all of the above in a single concise statement:
print(a[a > 2])

"""For brevity we have left out a lot of details about numpy array indexing; if you want to know more you should read the documentation.

###Datatypes

Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:
"""

x = np.array([1, 2])  # Let numpy choose the datatype
y = np.array([1.0, 2.0])  # Let numpy choose the datatype
z = np.array([1, 2], dtype=np.int64)  # Force a particular datatype

print(x.dtype, y.dtype, z.dtype)

"""You can read all about numpy datatypes in the [documentation](http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html).

###Array math

Basic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module:
"""

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)

# Elementwise sum; both produce the array
print(x + y)
print(np.add(x, y))

# Elementwise difference; both produce the array
print(x - y)
print(np.subtract(x, y))

# Elementwise product; both produce the array
print(x * y)
print(np.multiply(x, y))

# Elementwise division; both produce the array
# [[ 0.2         0.33333333]
#  [ 0.42857143  0.5       ]]
print(x / y)
print(np.divide(x, y))

# Elementwise square root; produces the array
# [[ 1.          1.41421356]
#  [ 1.73205081  2.        ]]
print(np.sqrt(x))

"""Note that unlike MATLAB, `*` is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both as a function in the numpy module and as an instance method of array objects:"""

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])

# Inner product of vectors; both produce 219 = 9*11+10*12
print(v.dot(w))
print(np.dot(v, w))

"""You can also use the `@` operator which is equivalent to numpy's `dot` operator."""

print(v @ w)

# Matrix / vector product; both produce the rank 1 array [29 67]
print(x.dot(v))
print(np.dot(x, v))
print(x @ v)

# Matrix / matrix product; both produce the rank 2 array
# [[19 22]
#  [43 50]]
print(x.dot(y))
print(np.dot(x, y))
print(x @ y)

"""Numpy provides many useful functions for performing computations on arrays; one of the most useful is `sum`:"""

x = np.array([[1,2],[3,4]])

print(np.sum(x))  # Compute sum of all elements; prints "10"
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"

"""Solving systems of linear equations:

"""

# To solve a system of equations Ax=b that is given in matrix form 
# (i.e A is a matrix and x and b are vectors where A and b are known 
# and we want to find the unknown vector x), 
# we can use the linear algebra package (linalg) of numpy
import numpy.linalg as LA 
A = np.random.rand(5, 5) 
x = np.random.rand(5) 
print(x)
b=np.dot(A, x)
x = LA.solve(A, b)
print(x)

"""Computing eigenvalues and eigenvectors:"""

A = np.eye(3)
evalues, evectors = LA.eig(A)
print(evalues)
print(evectors)

"""You can find the full list of mathematical functions provided by numpy in the [documentation](http://docs.scipy.org/doc/numpy/reference/routines.math.html).

Apart from computing mathematical functions using arrays, we frequently need to reshape or otherwise manipulate data in arrays. The simplest example of this type of operation is transposing a matrix; to transpose a matrix, simply use the T attribute of an array object:
"""

print(x)
print("transpose\n", x.T)

v = np.array([[1,2,3]])
print(v)
print("transpose\n", v.T)

v = v.reshape(3, 1)
print(v)

"""###Broadcasting

Broadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array multiple times to perform some operation on the larger array.

For example, suppose that we want to add a constant vector to each row of a matrix. We could do it like this:
"""

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = np.empty_like(x)   # Create an empty matrix with the same shape as x

# Add the vector v to each row of the matrix x with an explicit loop
for i in range(4):
    y[i, :] = x[i, :] + v

print(y)

"""This works; however when the matrix `x` is very large, computing an explicit loop in Python could be slow. Note that adding the vector v to each row of the matrix `x` is equivalent to forming a matrix `vv` by stacking multiple copies of `v` vertically, then performing elementwise summation of `x` and `vv`. We could implement this approach like this:"""

vv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other
print(vv)                # Prints "[[1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]]"

y = x + vv  # Add x and vv elementwise
print(y)

"""Numpy broadcasting allows us to perform this computation without actually creating multiple copies of v. Consider this version, using broadcasting:"""

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = x + v  # Add v to each row of x using broadcasting
print(y)

"""The line `y = x + v` works even though `x` has shape `(4, 3)` and `v` has shape `(3,)` due to broadcasting; this line works as if v actually had shape `(4, 3)`, where each row was a copy of `v`, and the sum was performed elementwise.

Broadcasting two arrays together follows these rules:

1. If the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.
2. The two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.
3. The arrays can be broadcast together if they are compatible in all dimensions.
4. After broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.
5. In any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension

If this explanation does not make sense, try reading the explanation from the [documentation](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html) or this [explanation](http://wiki.scipy.org/EricsBroadcastingDoc).

Functions that support broadcasting are known as universal functions. You can find the list of all universal functions in the [documentation](http://docs.scipy.org/doc/numpy/reference/ufuncs.html#available-ufuncs).

Here are some applications of broadcasting:
"""

# Compute outer product of vectors
v = np.array([1,2,3])  # v has shape (3,)
w = np.array([4,5])    # w has shape (2,)
# To compute an outer product, we first reshape v to be a column
# vector of shape (3, 1); we can then broadcast it against w to yield
# an output of shape (3, 2), which is the outer product of v and w:

print(np.reshape(v, (3, 1)) * w)

# Add a vector to each row of a matrix
x = np.array([[1,2,3], [4,5,6]])
# x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),
# giving the following matrix:

print(x + v)

# Add a vector to each column of a matrix
# x has shape (2, 3) and w has shape (2,).
# If we transpose x then it has shape (3, 2) and can be broadcast
# against w to yield a result of shape (3, 2); transposing this result
# yields the final result of shape (2, 3) which is the matrix x with
# the vector w added to each column. Gives the following matrix:
# print(x+w)
print((x.T + w).T)

# Another solution is to reshape w to be a row vector of shape (2, 1);
# we can then broadcast it directly against x to produce the same
# output.
print(x + np.reshape(w, (2, 1)))

# Multiply a matrix by a constant:
# x has shape (2, 3). Numpy treats scalars as arrays of shape ();
# these can be broadcast together to shape (2, 3), producing the
# following array:
print(x * 2)

"""Broadcasting typically makes your code more concise and faster, so you should strive to use it where possible.

This brief overview has touched on many of the important things that you need to know about numpy, but is far from complete. Check out the [numpy reference](http://docs.scipy.org/doc/numpy/reference/) to find out much more about numpy.

##Matplotlib

Matplotlib is a plotting library. In this section give a brief introduction to the `matplotlib.pyplot` module, which provides a plotting system similar to that of MATLAB.
"""

import matplotlib.pyplot as plt

"""By running this special iPython command, we will be displaying plots inline:"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""###Plotting

The most important function in `matplotlib` is plot, which allows you to plot 2D data. Here is a simple example:
"""

# Compute the x and y coordinates for points on a sine curve
x = np.arange(0, 3 * np.pi, 0.1)
y = np.sin(x)

# Plot the points using matplotlib
plt.plot(x, y)

"""With just a little bit of extra work we can easily plot multiple lines at once, and add a title, legend, and axis labels:"""

y_sin = np.sin(x)
y_cos = np.cos(x)

# Plot the points using matplotlib
plt.plot(x, y_sin)
plt.plot(x, y_cos)
plt.xlabel('x axis label')
plt.ylabel('y axis label')
plt.title('Sine and Cosine')
plt.legend(['Sine', 'Cosine'])

"""###Subplots

You can plot different things in the same figure using the subplot function. Here is an example:
"""

# Compute the x and y coordinates for points on sine and cosine curves
x = np.arange(0, 3 * np.pi, 0.1)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Set up a subplot grid that has height 2 and width 1,
# and set the first such subplot as active.
plt.subplot(2, 1, 1)

# Make the first plot
plt.plot(x, y_sin)
plt.title('Sine')

# Set the second subplot as active, and make the second plot.
plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title('Cosine')

# Show the figure.
plt.show()

# Save the figure.
plt.savefig('save.png')

"""You can read much more about the `subplot` function in the [documentation](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot).

Showing some other useful commands, the full list of options can be found when typing help(pylab.plot) at the Python prompt:

*   figure(figsize=(5,5)) sets the figure size to 5inch by 5inch
*   plot(x,y1,label=sin(x)) The “label” keyword defines the name of this line. The line label will be shown in the legend if the legend() command is used later.
*   Note that calling the plot command repeatedly, allows you to overlay a number of curves.
*   axis([-2,2,-1,1]) This fixes the displayed area to go from xmin=-2 to xmax=2 in x-direction, and from ymin=-1 to ymax=1 in y-direction.
*   legend() This command will display a legend with the labels as defined in the plot command. Try help(pylab.legend) to learn more about the placement of the legend. 
*   grid() This command will display a grid on the backdrop
*   xlabel(...) and ylabel(...) allow labelling the axes.
*   chose different line styles, line thicknesses, symbols and colours for the data to be plotted. (The syntax is very similar to MATLAB.) For example: 

  * `plot(x,y,og)` will plot circles (o) in green (g)
  * `plot(x,y,-r)` will plot a line (-) in red (r)
  * `plot(x,y,-b,linewidth=2)` will plot a blue line (b) with two two pixel thickness linewidth=2 which is twice as wide as the default.

###Histograms
"""

import scipy.stats
mu, sigma = 100, 15
x = mu + sigma*np.random.randn(10000)
# the histogram of the data
n, bins, patches = plt.hist(x, 50, density=1, facecolor='green', alpha=0.75) # add a 'best fit' line
y = scipy.stats.norm.pdf(bins, mu, sigma) # create the plot
l = plt.plot(bins, y, 'r--', linewidth=1)
# annotate the plot
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title(r'$\mathrm{Histogram\ of\ IQ:}\ \mu=100,\ \sigma=15$') 
plt.axis([40, 160, 0, 0.03])
plt.grid(True)

"""## Pandas

[*pandas*](http://pandas.pydata.org/) is a column-oriented data analysis API. It's a great tool for handling and analyzing input data, and many ML frameworks support *pandas* data structures as inputs.
Although a comprehensive introduction to the *pandas* API would span many pages, the core concepts are fairly straightforward, and we'll present them below. For a more complete reference, the [*pandas* docs site](http://pandas.pydata.org/pandas-docs/stable/index.html) contains extensive documentation and many tutorials.

### Basic Concepts

The following line imports the *pandas* API and prints the API version:
"""

from __future__ import print_function

import pandas as pd
pd.__version__

"""The primary data structures in *pandas* are implemented as two classes:

  * **`DataFrame`**, which you can imagine as a relational data table, with rows and named columns.
  * **`Series`**, which is a single column. A `DataFrame` contains one or more `Series` and a name for each `Series`.

The data frame is a commonly used abstraction for data manipulation. Similar implementations exist in [Spark](https://spark.apache.org/) and [R](https://www.r-project.org/about.html).

One way to create a `Series` is to construct a `Series` object. For example:
"""

pd.Series(['San Francisco', 'San Jose', 'Sacramento'])

"""`DataFrame` objects can be created by passing a `dict` mapping `string` column names to their respective `Series`. If the `Series` don't match in length, missing values are filled with special [NA/NaN](http://pandas.pydata.org/pandas-docs/stable/missing_data.html) values. Example:"""

city_names = pd.Series(['San Francisco', 'San Jose', 'Sacramento'])
population = pd.Series([852469, 1015785, 485199])
assert len(city_names) == len(population) # check  and  are consistent
cities = pd.DataFrame({ 'City name': city_names, 'Population': population })

cities.to_csv("cities.csv")

"""But most of the time, you load an entire file into a `DataFrame`. The following example loads a file with California housing data. Run the following cell to load the data and create feature definitions:"""

california_housing_dataframe = pd.read_csv("https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv", sep=",")
california_housing_dataframe.describe()

"""The example above used `DataFrame.describe` to show interesting statistics about a `DataFrame`. Another useful function is `DataFrame.head`, which displays the first few records of a `DataFrame`:"""

california_housing_dataframe.head()

"""Another powerful feature of *pandas* is graphing. For example, `DataFrame.hist` lets you quickly study the distribution of values in a column:"""

california_housing_dataframe.hist('housing_median_age')

df = pd.DataFrame(np.random.randn(1000, 4), columns=["A", "B", "C", "D"])
 df = df.cumsum()
 df.plot()

"""### Accessing Data

You can access `DataFrame` data using familiar Python dict/list operations:
"""

cities = pd.DataFrame({ 'City name': city_names, 'Population': population })
print(cities.dtypes)

print(type(cities['City name']))
cities['City name']

print(type(cities['City name'][0]))
cities['City name'][0]

print(type(cities[0:2]))
cities[0:2]

cities.head(2)

cities.tail(2)

cities.iloc[[2]]

cities.loc[:, 'City name']

"""In addition, *pandas* provides an extremely rich API for advanced [indexing and selection](http://pandas.pydata.org/pandas-docs/stable/indexing.html) that is too extensive to be covered here.

### Manipulating Data

You may apply Python's basic arithmetic operations to `Series`. For example:
"""

population / 1000.

"""*pandas* `Series` can be used as arguments to most NumPy functions:"""

import numpy as np

np.log(population)

cities.mean()

cities['City name'].str.lower()

cities.to_numpy()

cities.T

"""For more complex single-column transformations, you can use `Series.apply`. Like the Python [map function](https://docs.python.org/2/library/functions.html#map), 
`Series.apply` accepts as an argument a [lambda function](https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions), which is applied to each value.

The example below creates a new `Series` that indicates whether `population` is over one million:
"""

population.apply(lambda val: val > 1000000)

"""
Modifying `DataFrames` is also straightforward. For example, the following code adds two `Series` to an existing `DataFrame`:"""

cities['Area square miles'] = pd.Series([46.87, 176.53, 97.92])
cities['Population density'] = cities['Population'] / cities['Area square miles']
cities

"""Modifying the `cities` table by adding a new boolean column that is True if and only if *both* of the following are True:

  * The city is named after a saint.
  * The city has an area greater than 50 square miles.

**Note:** Boolean `Series` are combined using the bitwise, rather than the traditional boolean, operators. For example, when performing *logical and*, use `&` instead of `and`.

**Hint:** "San" in Spanish means "saint."
"""

cities['Is wide and has saint name'] = (cities['Area square miles'] > 50) & cities['City name'].apply(lambda name: name.startswith('San'))
cities

"""Concatenating pandas objects together with concat()"""

city = pd.DataFrame({"City name": ["San Francisco", 'Sacramento'],  "Population": [20, 30]})
all_city = pd.concat([cities, city])
all_city

"""SQL style merges"""

pd.merge(cities, city, on="City name")

"""By “group by” we are referring to a process involving one or more of the following steps:
* Splitting the data into groups based on some criteria
* Applying a function to each group independently
* Combining the results into a data structure
"""

all_city.groupby("City name").sum()

"""### Indexes
Both `Series` and `DataFrame` objects also define an `index` property that assigns an identifier value to each `Series` item or `DataFrame` row. 

By default, at construction, *pandas* assigns index values that reflect the ordering of the source data. Once created, the index values are stable; that is, they do not change when data is reordered.
"""

city_names.index

cities.index

"""Call `DataFrame.reindex` to manually reorder the rows. For example, the following has the same effect as sorting by city name:"""

cities.reindex([2, 0, 1])

cities.sort_values(by="City name")

cities.sort_index(axis=0, ascending=True)

"""Reindexing is a great way to shuffle (randomize) a `DataFrame`. In the example below, we take the index, which is array-like, and pass it to NumPy's `random.permutation` function, which shuffles its values in place. Calling `reindex` with this shuffled array causes the `DataFrame` rows to be shuffled in the same way.
Try running the following cell multiple times!
"""

cities.reindex(np.random.permutation(cities.index))

"""For more information, see the [Index documentation](http://pandas.pydata.org/pandas-docs/stable/indexing.html#index-objects).

If your `reindex` input array includes values not in the original `DataFrame` index values, `reindex` will add new rows for these "missing" indices and populate all corresponding columns with `NaN` values:
"""

cities.reindex([0, 4, 5, 2])

"""This behavior is desirable because indexes are often strings pulled from the actual data (see the [*pandas* reindex
documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reindex.html) for an example
in which the index values are browser names).

In this case, allowing "missing" indices makes it easy to reindex using an external list, as you don't have to worry about
sanitizing the input.
"""

cities = cities.reindex([0, 4, 5, 2])
cities.isna()

cities.fillna(value=5)

cities.dropna(how="any")

"""## ———— Next Time ————
Object oriented programming in Python.
"""